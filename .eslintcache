[{"C:\\Users\\Chingis\\Documents\\Web Apps\\FrontEnd\\sun-position\\src\\reportWebVitals.js":"1","C:\\Users\\Chingis\\Documents\\Web Apps\\FrontEnd\\sun-position\\src\\App.js":"2","C:\\Users\\Chingis\\Documents\\Web Apps\\FrontEnd\\sun-position\\src\\index.js":"3","C:\\Users\\Chingis\\Documents\\Web Apps\\FrontEnd\\sun-position\\src\\utils\\sunPosition.js":"4"},{"size":362,"mtime":1606124688192,"results":"5","hashOfConfig":"6"},{"size":7181,"mtime":1607069312852,"results":"7","hashOfConfig":"6"},{"size":500,"mtime":1606124688192,"results":"8","hashOfConfig":"6"},{"size":1712,"mtime":1607069027276,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"a4yllj",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Chingis\\Documents\\Web Apps\\FrontEnd\\sun-position\\src\\reportWebVitals.js",[],"C:\\Users\\Chingis\\Documents\\Web Apps\\FrontEnd\\sun-position\\src\\App.js",["19","20"],"import \"./App.css\";\nimport { useState } from \"react\";\nimport DateFnsUtils from \"@date-io/date-fns\"; // choose your lib\nimport {\n  DatePicker,\n  TimePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { createStore } from \"redux\";\nimport { Provider, useDispatch, useSelector } from \"react-redux\";\nimport useInterval from \"@use-it/interval\";\n\nimport getPosition from \"./utils/sunPosition\";\n\nconst language = {\n  EN: {\n    currentTime: \"Current time\",\n    selectedTime: \"Selected time\",\n    darkTheme: \"Dark Theme\",\n    lightTheme: \"Light Theme\",\n    azimuth: \"Azimuth\",\n    altitude: \"Altitude\",\n    latitude: \"Latitude\",\n    longitude: \"Longitude\",\n  },\n  RU: {\n    currentTime: \"Текущее время\",\n    selectedTime: \"Выбранное время\",\n    darkTheme: \"Темная тема\",\n    lightTheme: \"Светлая тема\",\n    azimuth: \"Азимут\",\n    altitude: \"Высота\",\n    latitude: \"Широта\",\n    longitude: \"Долгота\",\n  },\n};\n\nconst defaultLongitude = 107.6;\nconst defaultLatitude = 51.84;\n\n//default value\nconst initialState = {\n  selectedDate: new Date(),\n  langData: language.RU,\n  theme: { dark: false },\n  coordinates: {\n    latitude: defaultLatitude,\n    longitude: defaultLongitude,\n  },\n};\n\n//reducers\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case action.type === \"\":\n      return 0;\n    default:\n      return state;\n  }\n};\n\n//action creators\n\n//actions\n\n//store\nconst store = createStore(rootReducer, initialState);\n\nconst useStyles = makeStyles({\n  root: {\n    width: 300,\n  },\n});\n\nfunction valuetext(value) {\n  return `${value}`;\n}\n\nfunction App() {\n  const [selectedDate, handleDateChange] = useState(new Date());\n\n  const [langData, setLangData] = useState(language.RU);\n\n  const [theme, setTheme] = useState({ dark: false });\n\n  const defaultLongitude = 107.6;\n  const defaultLatitude = 51.84;\n\n  const [coordinates, setCoordinates] = useState({\n    latitude: defaultLatitude,\n    longitude: defaultLongitude,\n  });\n\n  const [sunPosition, setSunPosition] = useState(\n    getPosition(selectedDate, coordinates.latitude, coordinates.longitude)\n  );\n\n  const radiansToDegrees = (rad) => {\n    const degree = rad * (180 / Math.PI);\n    return degree;\n  };\n\n  const azimuthDeg = radiansToDegrees(sunPosition.azimuth) + 180;\n  const altitudeDeg = radiansToDegrees(sunPosition.altitude);\n\n  useInterval(() => {\n    setSunPosition(\n      getPosition(\n        selectedDate.setSeconds(selectedDate.getSeconds() + 1),\n        coordinates.latitude,\n        coordinates.longitude\n      )\n    );\n  }, 1000);\n\n  const nightColor = \"#5e81ac\";\n  const goldenHoursColor = \"#f08c00\";\n  const twilightColor = \"#9775fa\";\n  const daylightColor = \"#228be6\";\n\n  const color = (sunAltitude) => {\n    if (sunAltitude >= 10) {\n      return daylightColor;\n    } else if (sunAltitude < 10 && sunAltitude >= 0) {\n      return goldenHoursColor;\n    } else if (sunAltitude < 0 && sunAltitude >= -10) {\n      return twilightColor;\n    } else if (sunAltitude < -10) {\n      return nightColor;\n    }\n  };\n\n  const classes = useStyles();\n\n  function Clock() {\n    const [currentTime, setCurrentTime] = useState(new Date());\n\n    useInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return (\n      <div className=\"current-time\">\n        {langData.currentTime}: {currentTime.toLocaleTimeString(\"ru-RU\")}\n      </div>\n    );\n  }\n\n  return (\n    <Provider store={store}>\n      <div className={theme.dark ? \"App dark\" : \"App\"}>\n        <div className=\"toggle-buttons\">\n          <button\n            className=\"toggle-theme\"\n            onClick={() =>\n              theme.dark ? setTheme({ dark: false }) : setTheme({ dark: true })\n            }\n          >\n            {theme.dark ? langData.lightTheme : langData.darkTheme}\n          </button>\n          <button\n            className=\"toggle-lang\"\n            onClick={() =>\n              langData === language.RU\n                ? setLangData(language.EN)\n                : setLangData(language.RU)\n            }\n          >\n            {langData === language.RU ? \"EN\" : \"RU\"}\n          </button>\n        </div>\n\n        <div className=\"main\">\n          <Clock />\n\n          {/* <div className=\"altitude\">{position.altitude}</div> */}\n          <div className=\"sun-info\">\n            <div className=\"sun-info__block\">\n              <div\n                className=\"sun-info__gauge\"\n                style={{ transform: `rotateZ(${azimuthDeg + 180}deg)` }}\n              >\n                <div\n                  className=\"sun-info__marker\"\n                  style={{ border: `${color(altitudeDeg)} solid .5vw` }}\n                ></div>\n              </div>\n              <div className=\"sun-info__data\">\n                {langData.azimuth}: {azimuthDeg.toFixed(2)}\n                <sup>o</sup>\n              </div>\n            </div>\n            <div className=\"sun-info__block\">\n              <div\n                className=\"sun-info__gauge\"\n                style={{ transform: `rotateZ(${-altitudeDeg - 90}deg)` }}\n              >\n                <div\n                  className=\"sun-info__marker\"\n                  style={{ border: `${color(altitudeDeg)} solid 0.5vw` }}\n                ></div>\n              </div>\n              <div className=\"sun-info__data\">\n                {langData.altitude}: {altitudeDeg.toFixed(2)}\n                <sup>o</sup>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"inputs\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <DatePicker value={selectedDate} onChange={handleDateChange} />\n              <TimePicker value={selectedDate} onChange={handleDateChange} />\n            </MuiPickersUtilsProvider>\n            <div className={classes.root}>\n              <Typography id=\"discrete-slider\" gutterBottom>\n                {langData.latitude}\n              </Typography>\n\n              <Slider\n                getAriaValueText={valuetext}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                value={coordinates.latitude}\n                onChange={(e, value) =>\n                  setCoordinates({ ...coordinates, latitude: value })\n                }\n                marks={false}\n                min={-90}\n                max={90}\n              />\n              <Typography id=\"discrete-slider\" gutterBottom>\n                {langData.longitude}\n              </Typography>\n              <Slider\n                getAriaValueText={valuetext}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                value={coordinates.longitude}\n                onChange={(e, value) =>\n                  setCoordinates({ ...coordinates, longitude: value })\n                }\n                marks={false}\n                min={-180}\n                max={180}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","C:\\Users\\Chingis\\Documents\\Web Apps\\FrontEnd\\sun-position\\src\\index.js",[],"C:\\Users\\Chingis\\Documents\\Web Apps\\FrontEnd\\sun-position\\src\\utils\\sunPosition.js",[],{"ruleId":"21","severity":1,"message":"22","line":13,"column":20,"nodeType":"23","messageId":"24","endLine":13,"endColumn":31},{"ruleId":"21","severity":1,"message":"25","line":13,"column":33,"nodeType":"23","messageId":"24","endLine":13,"endColumn":44},"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used."]